#include <iostream>
#include "GaussQuadrature.hpp"

//Overload constructor.
GaussQuadrature::GaussQuadrature(std::string name, unsigned int nQp) :
QuadratureRule("Gauss"), nQuadraturePoints(nQp) {
    //Sets the Gauss Quadrature Order for 1D, 2D, and 3D elements.
    if(strcasecmp(name.c_str(),"Line") == 0){
        nOrderQuadrature = nQp;
        //Quadrature number for Line is not implemented.
        if(nQp > 4){
            nOrderQuadrature  =  3;
            nQuadraturePoints =  3;
        }
    }
    else if(strcasecmp(name.c_str(),"Tria") == 0){
        if(nQp == 1)
            nOrderQuadrature = 1;
        else if(nQp == 3)
            nOrderQuadrature = 2;
        else if(nQp == 7)
            nOrderQuadrature = 3;
        else if(nQp == 13)
            nOrderQuadrature = 4;
        else{
            nOrderQuadrature  =  3;
            nQuadraturePoints =  7;
        }
    }
    else if(strcasecmp(name.c_str(),"Quad") == 0){
        if(nQp == 1)
            nOrderQuadrature = 1;
        else if(nQp == 4)
            nOrderQuadrature = 2;
        else if(nQp == 9)
            nOrderQuadrature = 3;
        else if(nQp == 16)
            nOrderQuadrature = 4;
        else{
            nOrderQuadrature  = 3;
            nQuadraturePoints = 9;
        }
    }
    else if(strcasecmp(name.c_str(),"Tetra") == 0){
        if(nQp == 1)
            nOrderQuadrature = 1;
        else if(nQp == 4)
            nOrderQuadrature = 2;
        else if(nQp == 11)
            nOrderQuadrature = 3;
        else if(nQp == 16)
            nOrderQuadrature = 4;
        else{
            nOrderQuadrature  =  3;
            nQuadraturePoints =  11;
        }
    }
    else if(strcasecmp(name.c_str(),"Hexa") == 0){
        if(nQp == 1)
            nOrderQuadrature = 1;
        else if(nQp == 8)
            nOrderQuadrature = 2;
        else if(nQp == 27)
            nOrderQuadrature = 3;
        else if(nQp == 64)
            nOrderQuadrature = 4;
        else{
            nOrderQuadrature  =  3;
            nQuadraturePoints =  27;
        }
    }
}

//Destructor.
GaussQuadrature::~GaussQuadrature(){
    //Does nothing.
}

//Gets Number of Gauss Integration Points.
unsigned int 
GaussQuadrature::GetNumberOfQuadraturePoints(){
    return nQuadraturePoints;
}

//Gets Gauss Integration Points.
void
GaussQuadrature::GetQuadraturePoints(std::string name, Eigen::VectorXd &Weights, Eigen::MatrixXd &Points){
    //Sets the Gauss Quadrature Order for 1D, 2D, and 3D elements.
    if(strcasecmp(name.c_str(),"Line") == 0)
        SetLineQuadraturePoints(Weights, Points);
    else if(strcasecmp(name.c_str(),"Tria") == 0)
        SetTriaQuadraturePoints(Weights, Points);
    else if(strcasecmp(name.c_str(),"Quad") == 0)
        SetQuadQuadraturePoints(Weights, Points);
    else if(strcasecmp(name.c_str(),"Tetra") == 0)
        SetTetraQuadraturePoints(Weights, Points);
    else if(strcasecmp(name.c_str(),"Hexa") == 0)
        SetHexaQuadraturePoints(Weights, Points);
}

//Sets Gauss Quadrature for Line Elements.
void 
GaussQuadrature::SetLineQuadraturePoints(Eigen::VectorXd &Weights, Eigen::MatrixXd &Points){
    if(nOrderQuadrature == 1){
        //One-point Gauss quadrature.
        Weights.resize(1);
        Weights <<    2.000000000000000;

        Points.resize(1, 1);
        Points  <<    0.000000000000000;
    }
    else if(nOrderQuadrature == 2){
        //Two-point Gauss quadrature.
        Weights.resize(2);
        Weights <<  1.000000000000000,
                    1.000000000000000;

        Points.resize(2, 1);
        Points  << -0.577350269189626, 
                    0.577350269189626;
    }
    else if(nOrderQuadrature == 3){
        //Three-point Gauss quadrature.
        Weights.resize(3);
        Weights <<  0.555555555555556, 
                    0.888888888888889, 
                    0.555555555555556;

        Points.resize(3, 1);
        Points  << -0.774596669241483, 
                    0.000000000000000, 
                    0.774596669241483;
    }
    else if(nOrderQuadrature == 4){
        //Four-point Gauss quadrature.
        Weights.resize(4);
        Weights <<  0.347854845137454, 
                    0.652145154862546, 
                    0.652145154862546, 
                    0.347854845137454;

        Points.resize(4, 1);
        Points  << -0.861136311594053,
                   -0.339981043584856, 
                    0.339981043584856, 
                    0.861136311594053;
    }
    else if(nOrderQuadrature == 5){
        //Five-point Gauss quadrature.
        Weights.resize(5);
        Weights <<  0.2369268850561891,
                    0.4786286704993665,
                    0.5688888888888889,
                    0.4786286704993665,
                    0.2369268850561891;

        Points.resize(5, 1);
        Points  << -0.9061798459386640,
                   -0.5384693101056831,
                    0.0000000000000000,
                    0.5384693101056831,
                    0.9061798459386640;
    }
    else if(nOrderQuadrature == 6){
        //Six-point Gauss quadrature.
        Weights.resize(6);
        Weights <<  0.1713244923791704,
                    0.3607615730481386,
                    0.4679139345726910,
                    0.4679139345726910,
                    0.3607615730481386,
                    0.1713244923791704;

        Points.resize(6, 1);
        Points  << -0.9324695142031521,
                   -0.6612093864662645,
                   -0.2386191860831969,
                    0.2386191860831969,
                    0.6612093864662645,
                    0.9324695142031521;
    }
    else if(nOrderQuadrature == 7){
        //Seven-point Gauss quadrature.
        Weights.resize(7);
        Weights <<  0.1294849661688697,
                    0.2797053914892766,
                    0.3818300505051189,
                    0.4179591836734694,
                    0.3818300505051189,
                    0.2797053914892766,
                    0.1294849661688697;

        Points.resize(7, 1);
        Points  << -0.9491079123427585,
                   -0.7415311855993945,
                   -0.4058451513773972,
                    0.0000000000000000,
                    0.4058451513773972,
                    0.7415311855993945,
                    0.9491079123427585;
    }
}

//Sets Gauss Quadrature for Triangular Elements.
void 
GaussQuadrature::SetTriaQuadraturePoints(Eigen::VectorXd &Weights, Eigen::MatrixXd &Points){
    if(nOrderQuadrature == 1){
        //One-point Gauss quadrature.
        Weights.resize(1);
        Weights <<  0.5000000000000;

        Points.resize(1, 2);
        Points  <<  0.3333333333333, 0.3333333333333;
    }
    else if(nOrderQuadrature == 2){
        //Three-point Gauss quadrature.
        Weights.resize(3);
        Weights <<  0.1666666666666,
                    0.1666666666666,
                    0.1666666666666;

        Points.resize(3, 2);
        Points  <<  0.1666666666666, 0.1666666666666, 
                    0.6666666666666, 0.1666666666666, 
                    0.1666666666666, 0.6666666666666;
    }
    else if(nOrderQuadrature == 3){
        //Seven-point Gauss quadrature.
        Weights.resize(7);
        Weights <<  0.0629695902724,
                    0.0629695902724,
                    0.0629695902724,
                    0.0661970763942,
                    0.0661970763942,
                    0.0661970763942,
                    0.1125000000000; 

        Points.resize(7, 2);
        Points  <<  0.1012865073235, 0.1012865073235, 
                    0.7974269853531, 0.1012865073235, 
                    0.1012865073235, 0.7974269853531,
                    0.4701420641051, 0.0597158717898, 
                    0.4701420641051, 0.4701420641051, 
                    0.0597158717898, 0.4701420641051, 
                    0.3333333333333, 0.3333333333333;
    }
    else if(nOrderQuadrature == 4){
        //Thirteen-point Gauss quadrature.
        Weights.resize(13);
        Weights <<  0.0266736178044,
                    0.0266736178044,
                    0.0266736178044,
                    0.0385568804451,
                    0.0385568804451,
                    0.0385568804451,
                    0.0385568804451,
                    0.0385568804451,
                    0.0385568804451,
                    0.0878076287166,
                    0.0878076287166,
                    0.0878076287166,
                   -0.0747850222338; 

        Points.resize(13, 2);
        Points  <<  0.0651301029022, 0.0651301029022, 
                    0.8697397941956, 0.0651301029022, 
                    0.0651301029022, 0.8697397941956,
                    0.3128654960049, 0.0486903154253, 
                    0.6384441885698, 0.3128654960049, 
                    0.0486903154253, 0.6384441885698, 
                    0.6384441885698, 0.0486903154253,
                    0.3128654960049, 0.6384441885698, 
                    0.0486903154253, 0.3128654960049, 
                    0.2603459660790, 0.2603459660790,
                    0.4793080678419, 0.2603459660790, 
                    0.2603459660790, 0.4793080678419, 
                    0.3333333333333, 0.3333333333333;
    }
}

//Sets Gauss Quadrature for Quadrilateral Elements.
void 
GaussQuadrature::SetQuadQuadraturePoints(Eigen::VectorXd &Weights, Eigen::MatrixXd &Points){
    if(nOrderQuadrature == 1){
        //One-point Gauss quadrature.
        Weights.resize(1);
        Weights <<  4.000000000000000;

        Points.resize(1, 2); 
        Points  <<  0.000000000000000, 0.000000000000000; 
    }
    else if(nOrderQuadrature == 2){
        //Four-point Gauss quadrature.
        Weights.resize(4);
        Weights <<  1.000000000000000, 
                    1.000000000000000, 
                    1.000000000000000, 
                    1.000000000000000;

        Points.resize(4, 2);
        Points  << -0.577350269189626, -0.577350269189626, 
                    0.577350269189626, -0.577350269189626, 
                   -0.577350269189626,  0.577350269189626, 
                    0.577350269189626,  0.577350269189626;
    }
    else if(nOrderQuadrature == 3){
        //Nine-point Gauss quadrature.
        Weights.resize(9);
        Weights <<  0.308641975308643, 
                    0.493827160493828, 
                    0.308641975308643, 
                    0.493827160493828, 
                    0.790123456790124, 
                    0.493827160493828, 
                    0.308641975308643, 
                    0.493827160493828, 
                    0.308641975308643;

        Points.resize(9, 2);
        Points  << -0.774596669241483, -0.774596669241483, 
                    0.000000000000000, -0.774596669241483, 
                    0.774596669241483, -0.774596669241483, 
                   -0.774596669241483,  0.000000000000000, 
                    0.000000000000000,  0.000000000000000, 
                    0.774596669241483,  0.000000000000000, 
                   -0.774596669241483,  0.774596669241483, 
                    0.000000000000000,  0.774596669241483, 
                    0.774596669241483,  0.774596669241483;
    }
    else if(nOrderQuadrature == 4){
        //Sixteen-point Gauss quadrature.
        Weights.resize(16);
        Weights <<  0.121002993285602, 
                    0.226851851851852, 
                    0.226851851851852, 
                    0.121002993285602, 
                    0.226851851851852, 
                    0.425293303010694, 
                    0.425293303010694, 
                    0.226851851851852, 
                    0.226851851851852, 
                    0.425293303010694, 
                    0.425293303010694, 
                    0.226851851851852, 
                    0.121002993285602, 
                    0.226851851851852, 
                    0.226851851851852, 
                    0.121002993285602;
 
        Points.resize(16, 2);
        Points  << -0.861136311594053, -0.861136311594053, 
                   -0.339981043584856, -0.861136311594053, 
                    0.339981043584856, -0.861136311594053, 
                    0.861136311594053, -0.861136311594053, 
                   -0.861136311594053, -0.339981043584856, 
                   -0.339981043584856, -0.339981043584856, 
                    0.339981043584856, -0.339981043584856, 
                    0.861136311594053, -0.339981043584856, 
                   -0.861136311594053,  0.339981043584856, 
                   -0.339981043584856,  0.339981043584856, 
                    0.339981043584856,  0.339981043584856, 
                    0.861136311594053,  0.339981043584856, 
                   -0.861136311594053,  0.861136311594053, 
                   -0.339981043584856,  0.861136311594053, 
                    0.339981043584856,  0.861136311594053, 
                    0.861136311594053,  0.861136311594053; 
    }
}

//Sets Gauss Quadrature for Tetrahedron Elements.
void 
GaussQuadrature::SetTetraQuadraturePoints(Eigen::VectorXd &Weights, Eigen::MatrixXd &Points){
    if(nOrderQuadrature == 1){
        //One-point Gauss quadrature.
        Weights.resize(1);
        Weights <<  0.166666666666666;

        Points.resize(1, 3);
        Points  <<  0.250000000000000, 0.250000000000000, 0.250000000000000; 
    }
    else if(nOrderQuadrature == 2){
        //Four-point Gauss quadrature.
        Weights.resize(4);
        Weights <<  0.041666666666667,
                    0.041666666666667,
                    0.041666666666667,
                    0.041666666666667;

        Points.resize(4, 3);
        Points  <<  0.585410196624969, 0.138196601125011, 0.138196601125011,
                    0.138196601125011, 0.138196601125011, 0.138196601125011,
                    0.138196601125011, 0.138196601125011, 0.585410196624969,
                    0.138196601125011, 0.585410196624969, 0.138196601125011;
    }
    else if(nOrderQuadrature == 3){
        //Eleven-point Gauss quadrature.
        Weights.resize(11);
        Weights << -0.013155555555556,
                    0.007622222222222,
                    0.007622222222222,
                    0.007622222222222,
                      0.007622222222222,
                    0.024888888888889,
                    0.024888888888889,
                    0.024888888888889,
                    0.024888888888889,
                    0.024888888888889,
                    0.024888888888889;

        Points.resize(11, 3);
        Points  <<  0.250000000000000, 0.250000000000000, 0.250000000000000,
                    0.785714285714286, 0.071428571428571, 0.071428571428571,
                    0.071428571428571, 0.071428571428571, 0.071428571428571,
                    0.071428571428571, 0.071428571428571, 0.785714285714286,
                    0.071428571428571, 0.785714285714286, 0.071428571428571,
                    0.100596423833201, 0.399403576166799, 0.399403576166799,
                    0.399403576166799, 0.100596423833201, 0.399403576166799,
                    0.399403576166799, 0.399403576166799, 0.100596423833201,
                    0.399403576166799, 0.100596423833201, 0.100596423833201,
                    0.100596423833201, 0.399403576166799, 0.100596423833201,
                    0.100596423833201, 0.100596423833201, 0.399403576166799;
    }
    else if(nOrderQuadrature == 4){
        //Fifteen-point Gauss quadrature.
        Weights.resize(15);
        Weights <<  0.030283678097089,
                    0.006026785714286,
                    0.006026785714286,
                    0.006026785714286,
                    0.006026785714286,
                    0.011645249086029,
                    0.011645249086029,
                    0.011645249086029,
                    0.011645249086029,
                    0.010949141561386,
                    0.010949141561386,
                    0.010949141561386,
                    0.010949141561386,
                    0.010949141561386,
                    0.010949141561386;

        Points.resize(15, 3);
        Points  <<  0.250000000000000, 0.250000000000000, 0.250000000000000,
                    0.000000000000000, 0.333333333333333, 0.333333333333333,
                    0.333333333333333, 0.333333333333333, 0.333333333333333,
                    0.333333333333333, 0.333333333333333, 0.000000000000000,
                    0.333333333333333, 0.000000000000000, 0.333333333333333,
                    0.727272727272727, 0.090909090909091, 0.090909090909091,
                    0.090909090909091, 0.090909090909091, 0.090909090909091,
                    0.090909090909091, 0.090909090909091, 0.727272727272727,
                    0.090909090909091, 0.727272727272727, 0.090909090909091,
                    0.433449846426336, 0.066550153573664, 0.066550153573664,
                    0.066550153573664, 0.433449846426336, 0.066550153573664,
                    0.066550153573664, 0.066550153573664, 0.433449846426336,
                    0.066550153573664, 0.433449846426336, 0.433449846426336,
                    0.433449846426336, 0.066550153573664, 0.433449846426336,
                    0.433449846426336, 0.433449846426336, 0.066550153573664;
    }
}

//Sets Gauss Quadrature for Hexahedron Elements.
void 
GaussQuadrature::SetHexaQuadraturePoints(Eigen::VectorXd &Weights, Eigen::MatrixXd &Points){
    if(nOrderQuadrature == 1){
        //One-point Gauss quadrature.
        Weights.resize(1);
        Weights << 8.000000000000000;

        Points.resize(1, 3);
        Points  << 0.000000000000000, 0.000000000000000, 0.000000000000000; 
    }
    else if(nOrderQuadrature == 2){
        //Eight-point Gauss quadrature.
        Weights.resize(8);
        Weights <<  1.000000000000000, 
                    1.000000000000000, 
                    1.000000000000000, 
                    1.000000000000000, 
                    1.000000000000000, 
                    1.000000000000000, 
                    1.000000000000000, 
                    1.000000000000000;

        Points.resize(8, 3);
        Points  << -0.577350269189626, -0.577350269189626, -0.577350269189626, 
                    0.577350269189626, -0.577350269189626, -0.577350269189626, 
                   -0.577350269189626,  0.577350269189626, -0.577350269189626, 
                    0.577350269189626,  0.577350269189626, -0.577350269189626, 
                   -0.577350269189626, -0.577350269189626,  0.577350269189626, 
                    0.577350269189626, -0.577350269189626,  0.577350269189626, 
                   -0.577350269189626,  0.577350269189626,  0.577350269189626, 
                    0.577350269189626,  0.577350269189626,  0.577350269189626;
    }
    else if(nOrderQuadrature == 3){
        //Twenty-seven-point Gauss quadrature.
        Weights.resize(27);
        Weights <<  0.171467764060357, 
                    0.274348422496571, 
                    0.171467764060357, 
                    0.274348422496571, 
                    0.438957475994513, 
                    0.274348422496571, 
                    0.171467764060357, 
                    0.274348422496571, 
                    0.171467764060357, 
                    0.274348422496571, 
                    0.438957475994513, 
                    0.274348422496571, 
                    0.438957475994513, 
                    0.702331961591221, 
                    0.438957475994513, 
                    0.274348422496571, 
                    0.438957475994513, 
                    0.274348422496571, 
                    0.171467764060357, 
                    0.274348422496571, 
                    0.171467764060357, 
                    0.274348422496571, 
                    0.438957475994513, 
                    0.274348422496571, 
                    0.171467764060357, 
                    0.274348422496571, 
                    0.171467764060357;

        Points.resize(27, 3);
        Points  << -0.774596669241483, -0.774596669241483, -0.774596669241483, 
                    0.000000000000000, -0.774596669241483, -0.774596669241483, 
                    0.774596669241483, -0.774596669241483, -0.774596669241483, 
                   -0.774596669241483,  0.000000000000000, -0.774596669241483, 
                    0.000000000000000,  0.000000000000000, -0.774596669241483, 
                    0.774596669241483,  0.000000000000000, -0.774596669241483, 
                   -0.774596669241483,  0.774596669241483, -0.774596669241483, 
                    0.000000000000000,  0.774596669241483, -0.774596669241483, 
                    0.774596669241483,  0.774596669241483, -0.774596669241483, 
                   -0.774596669241483, -0.774596669241483,  0.000000000000000, 
                    0.000000000000000, -0.774596669241483,  0.000000000000000, 
                    0.774596669241483, -0.774596669241483,  0.000000000000000, 
                   -0.774596669241483,  0.000000000000000,  0.000000000000000, 
                    0.000000000000000,  0.000000000000000,  0.000000000000000, 
                    0.774596669241483,  0.000000000000000,  0.000000000000000, 
                   -0.774596669241483,  0.774596669241483,  0.000000000000000, 
                    0.000000000000000,  0.774596669241483,  0.000000000000000, 
                    0.774596669241483,  0.774596669241483,  0.000000000000000, 
                   -0.774596669241483, -0.774596669241483,  0.774596669241483, 
                    0.000000000000000, -0.774596669241483,  0.774596669241483, 
                    0.774596669241483, -0.774596669241483,  0.774596669241483, 
                   -0.774596669241483,  0.000000000000000,  0.774596669241483, 
                    0.000000000000000,  0.000000000000000,  0.774596669241483, 
                    0.774596669241483,  0.000000000000000,  0.774596669241483, 
                   -0.774596669241483,  0.774596669241483,  0.774596669241483, 
                    0.000000000000000,  0.774596669241483,  0.774596669241483, 
                    0.774596669241483,  0.774596669241483,  0.774596669241483;
    }
    else if(nOrderQuadrature == 4){
        //Sixty-four-point Gauss quadrature.
        Weights.resize(64);
        Weights <<  0.042091477490532, 
                    0.078911515795071, 
                    0.078911515795071, 
                    0.042091477490532, 
                    0.078911515795071, 
                    0.147940336056781, 
                    0.147940336056781, 
                    0.078911515795071, 
                    0.078911515795071, 
                    0.147940336056781, 
                    0.147940336056781, 
                    0.078911515795071, 
                    0.042091477490532, 
                    0.078911515795071, 
                    0.078911515795071, 
                    0.042091477490532, 
                    0.078911515795071, 
                    0.147940336056781, 
                    0.147940336056781, 
                    0.078911515795071, 
                    0.147940336056781, 
                    0.277352966953913, 
                    0.277352966953913, 
                    0.147940336056781, 
                    0.147940336056781, 
                    0.277352966953913, 
                    0.277352966953913, 
                    0.147940336056781, 
                    0.078911515795071, 
                    0.147940336056781, 
                    0.147940336056781, 
                    0.078911515795071, 
                    0.078911515795071, 
                    0.147940336056781, 
                    0.147940336056781, 
                    0.078911515795071, 
                    0.147940336056781, 
                    0.277352966953913, 
                    0.277352966953913, 
                    0.147940336056781, 
                    0.147940336056781, 
                    0.277352966953913, 
                    0.277352966953913, 
                    0.147940336056781, 
                    0.078911515795071, 
                    0.147940336056781, 
                    0.147940336056781, 
                    0.078911515795071, 
                    0.042091477490532, 
                    0.078911515795071, 
                    0.078911515795071, 
                    0.042091477490532, 
                    0.078911515795071, 
                    0.147940336056781, 
                    0.147940336056781, 
                    0.078911515795071, 
                    0.078911515795071, 
                    0.147940336056781, 
                    0.147940336056781, 
                    0.078911515795071, 
                    0.042091477490532, 
                    0.078911515795071, 
                    0.078911515795071, 
                    0.042091477490532;

        Points.resize(64, 3);
        Points  << -0.861136311594053, -0.861136311594053, -0.861136311594053, 
                   -0.339981043584856, -0.861136311594053, -0.861136311594053, 
                    0.339981043584856, -0.861136311594053, -0.861136311594053, 
                    0.861136311594053, -0.861136311594053, -0.861136311594053, 
                   -0.861136311594053, -0.339981043584856, -0.861136311594053, 
                   -0.339981043584856, -0.339981043584856, -0.861136311594053, 
                    0.339981043584856, -0.339981043584856, -0.861136311594053, 
                    0.861136311594053, -0.339981043584856, -0.861136311594053, 
                   -0.861136311594053,  0.339981043584856, -0.861136311594053, 
                   -0.339981043584856,  0.339981043584856, -0.861136311594053, 
                    0.339981043584856,  0.339981043584856, -0.861136311594053, 
                    0.861136311594053,  0.339981043584856, -0.861136311594053, 
                   -0.861136311594053,  0.861136311594053, -0.861136311594053, 
                   -0.339981043584856,  0.861136311594053, -0.861136311594053, 
                    0.339981043584856,  0.861136311594053, -0.861136311594053, 
                    0.861136311594053,  0.861136311594053, -0.861136311594053, 
                   -0.861136311594053, -0.861136311594053, -0.339981043584856, 
                   -0.339981043584856, -0.861136311594053, -0.339981043584856, 
                    0.339981043584856, -0.861136311594053, -0.339981043584856, 
                    0.861136311594053, -0.861136311594053, -0.339981043584856, 
                   -0.861136311594053, -0.339981043584856, -0.339981043584856, 
                   -0.339981043584856, -0.339981043584856, -0.339981043584856, 
                    0.339981043584856, -0.339981043584856, -0.339981043584856, 
                    0.861136311594053, -0.339981043584856, -0.339981043584856, 
                   -0.861136311594053,  0.339981043584856, -0.339981043584856, 
                   -0.339981043584856,  0.339981043584856, -0.339981043584856, 
                    0.339981043584856,  0.339981043584856, -0.339981043584856, 
                    0.861136311594053,  0.339981043584856, -0.339981043584856, 
                   -0.861136311594053,  0.861136311594053, -0.339981043584856, 
                   -0.339981043584856,  0.861136311594053, -0.339981043584856, 
                    0.339981043584856,  0.861136311594053, -0.339981043584856, 
                    0.861136311594053,  0.861136311594053, -0.339981043584856, 
                   -0.861136311594053, -0.861136311594053,  0.339981043584856, 
                   -0.339981043584856, -0.861136311594053,  0.339981043584856, 
                    0.339981043584856, -0.861136311594053,  0.339981043584856, 
                    0.861136311594053, -0.861136311594053,  0.339981043584856, 
                   -0.861136311594053, -0.339981043584856,  0.339981043584856, 
                   -0.339981043584856, -0.339981043584856,  0.339981043584856, 
                    0.339981043584856, -0.339981043584856,  0.339981043584856, 
                    0.861136311594053, -0.339981043584856,  0.339981043584856, 
                   -0.861136311594053,  0.339981043584856,  0.339981043584856, 
                   -0.339981043584856,  0.339981043584856,  0.339981043584856, 
                    0.339981043584856,  0.339981043584856,  0.339981043584856, 
                    0.861136311594053,  0.339981043584856,  0.339981043584856, 
                   -0.861136311594053,  0.861136311594053,  0.339981043584856, 
                   -0.339981043584856,  0.861136311594053,  0.339981043584856, 
                    0.339981043584856,  0.861136311594053,  0.339981043584856, 
                    0.861136311594053,  0.861136311594053,  0.339981043584856, 
                   -0.861136311594053, -0.861136311594053,  0.861136311594053, 
                   -0.339981043584856, -0.861136311594053,  0.861136311594053, 
                    0.339981043584856, -0.861136311594053,  0.861136311594053, 
                    0.861136311594053, -0.861136311594053,  0.861136311594053, 
                   -0.861136311594053, -0.339981043584856,  0.861136311594053, 
                   -0.339981043584856, -0.339981043584856,  0.861136311594053, 
                    0.339981043584856, -0.339981043584856,  0.861136311594053, 
                    0.861136311594053, -0.339981043584856,  0.861136311594053, 
                   -0.861136311594053,  0.339981043584856,  0.861136311594053, 
                   -0.339981043584856,  0.339981043584856,  0.861136311594053, 
                    0.339981043584856,  0.339981043584856,  0.861136311594053, 
                    0.861136311594053,  0.339981043584856,  0.861136311594053, 
                   -0.861136311594053,  0.861136311594053,  0.861136311594053, 
                   -0.339981043584856,  0.861136311594053,  0.861136311594053, 
                    0.339981043584856,  0.861136311594053,  0.861136311594053, 
                    0.861136311594053,  0.861136311594053,  0.861136311594053;
    }
}
